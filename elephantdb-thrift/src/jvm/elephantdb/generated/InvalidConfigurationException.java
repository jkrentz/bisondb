/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package elephantdb.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-10-04")
public class InvalidConfigurationException extends org.apache.thrift.TException implements org.apache.thrift.TBase<InvalidConfigurationException, InvalidConfigurationException._Fields>, java.io.Serializable, Cloneable, Comparable<InvalidConfigurationException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InvalidConfigurationException");

  private static final org.apache.thrift.protocol.TField MISMATCHED_DOMAINS_FIELD_DESC = new org.apache.thrift.protocol.TField("mismatched_domains", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PORT_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("port_changed", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField HOSTS_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("hosts_changed", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InvalidConfigurationExceptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InvalidConfigurationExceptionTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> mismatched_domains; // required
  private boolean port_changed; // required
  private boolean hosts_changed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MISMATCHED_DOMAINS((short)1, "mismatched_domains"),
    PORT_CHANGED((short)2, "port_changed"),
    HOSTS_CHANGED((short)3, "hosts_changed");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MISMATCHED_DOMAINS
          return MISMATCHED_DOMAINS;
        case 2: // PORT_CHANGED
          return PORT_CHANGED;
        case 3: // HOSTS_CHANGED
          return HOSTS_CHANGED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_CHANGED_ISSET_ID = 0;
  private static final int __HOSTS_CHANGED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MISMATCHED_DOMAINS, new org.apache.thrift.meta_data.FieldMetaData("mismatched_domains", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PORT_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("port_changed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HOSTS_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("hosts_changed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InvalidConfigurationException.class, metaDataMap);
  }

  public InvalidConfigurationException() {
  }

  public InvalidConfigurationException(
    java.util.List<java.lang.String> mismatched_domains,
    boolean port_changed,
    boolean hosts_changed)
  {
    this();
    this.mismatched_domains = mismatched_domains;
    this.port_changed = port_changed;
    set_port_changed_isSet(true);
    this.hosts_changed = hosts_changed;
    set_hosts_changed_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InvalidConfigurationException(InvalidConfigurationException other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_mismatched_domains()) {
      java.util.List<java.lang.String> __this__mismatched_domains = new java.util.ArrayList<java.lang.String>(other.mismatched_domains);
      this.mismatched_domains = __this__mismatched_domains;
    }
    this.port_changed = other.port_changed;
    this.hosts_changed = other.hosts_changed;
  }

  public InvalidConfigurationException deepCopy() {
    return new InvalidConfigurationException(this);
  }

  @Override
  public void clear() {
    this.mismatched_domains = null;
    set_port_changed_isSet(false);
    this.port_changed = false;
    set_hosts_changed_isSet(false);
    this.hosts_changed = false;
  }

  public int get_mismatched_domains_size() {
    return (this.mismatched_domains == null) ? 0 : this.mismatched_domains.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> get_mismatched_domains_iterator() {
    return (this.mismatched_domains == null) ? null : this.mismatched_domains.iterator();
  }

  public void add_to_mismatched_domains(java.lang.String elem) {
    if (this.mismatched_domains == null) {
      this.mismatched_domains = new java.util.ArrayList<java.lang.String>();
    }
    this.mismatched_domains.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> get_mismatched_domains() {
    return this.mismatched_domains;
  }

  public void set_mismatched_domains(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> mismatched_domains) {
    this.mismatched_domains = mismatched_domains;
  }

  public void unset_mismatched_domains() {
    this.mismatched_domains = null;
  }

  /** Returns true if field mismatched_domains is set (has been assigned a value) and false otherwise */
  public boolean is_set_mismatched_domains() {
    return this.mismatched_domains != null;
  }

  public void set_mismatched_domains_isSet(boolean value) {
    if (!value) {
      this.mismatched_domains = null;
    }
  }

  public boolean is_port_changed() {
    return this.port_changed;
  }

  public void set_port_changed(boolean port_changed) {
    this.port_changed = port_changed;
    set_port_changed_isSet(true);
  }

  public void unset_port_changed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_CHANGED_ISSET_ID);
  }

  /** Returns true if field port_changed is set (has been assigned a value) and false otherwise */
  public boolean is_set_port_changed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_CHANGED_ISSET_ID);
  }

  public void set_port_changed_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_CHANGED_ISSET_ID, value);
  }

  public boolean is_hosts_changed() {
    return this.hosts_changed;
  }

  public void set_hosts_changed(boolean hosts_changed) {
    this.hosts_changed = hosts_changed;
    set_hosts_changed_isSet(true);
  }

  public void unset_hosts_changed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HOSTS_CHANGED_ISSET_ID);
  }

  /** Returns true if field hosts_changed is set (has been assigned a value) and false otherwise */
  public boolean is_set_hosts_changed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HOSTS_CHANGED_ISSET_ID);
  }

  public void set_hosts_changed_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HOSTS_CHANGED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MISMATCHED_DOMAINS:
      if (value == null) {
        unset_mismatched_domains();
      } else {
        set_mismatched_domains((java.util.List<java.lang.String>)value);
      }
      break;

    case PORT_CHANGED:
      if (value == null) {
        unset_port_changed();
      } else {
        set_port_changed((java.lang.Boolean)value);
      }
      break;

    case HOSTS_CHANGED:
      if (value == null) {
        unset_hosts_changed();
      } else {
        set_hosts_changed((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MISMATCHED_DOMAINS:
      return get_mismatched_domains();

    case PORT_CHANGED:
      return is_port_changed();

    case HOSTS_CHANGED:
      return is_hosts_changed();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MISMATCHED_DOMAINS:
      return is_set_mismatched_domains();
    case PORT_CHANGED:
      return is_set_port_changed();
    case HOSTS_CHANGED:
      return is_set_hosts_changed();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof InvalidConfigurationException)
      return this.equals((InvalidConfigurationException)that);
    return false;
  }

  public boolean equals(InvalidConfigurationException that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mismatched_domains = true && this.is_set_mismatched_domains();
    boolean that_present_mismatched_domains = true && that.is_set_mismatched_domains();
    if (this_present_mismatched_domains || that_present_mismatched_domains) {
      if (!(this_present_mismatched_domains && that_present_mismatched_domains))
        return false;
      if (!this.mismatched_domains.equals(that.mismatched_domains))
        return false;
    }

    boolean this_present_port_changed = true;
    boolean that_present_port_changed = true;
    if (this_present_port_changed || that_present_port_changed) {
      if (!(this_present_port_changed && that_present_port_changed))
        return false;
      if (this.port_changed != that.port_changed)
        return false;
    }

    boolean this_present_hosts_changed = true;
    boolean that_present_hosts_changed = true;
    if (this_present_hosts_changed || that_present_hosts_changed) {
      if (!(this_present_hosts_changed && that_present_hosts_changed))
        return false;
      if (this.hosts_changed != that.hosts_changed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_set_mismatched_domains()) ? 131071 : 524287);
    if (is_set_mismatched_domains())
      hashCode = hashCode * 8191 + mismatched_domains.hashCode();

    hashCode = hashCode * 8191 + ((port_changed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((hosts_changed) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(InvalidConfigurationException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(is_set_mismatched_domains()).compareTo(other.is_set_mismatched_domains());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_mismatched_domains()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mismatched_domains, other.mismatched_domains);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_port_changed()).compareTo(other.is_set_port_changed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_port_changed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_changed, other.port_changed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_hosts_changed()).compareTo(other.is_set_hosts_changed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_hosts_changed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hosts_changed, other.hosts_changed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("InvalidConfigurationException(");
    boolean first = true;

    sb.append("mismatched_domains:");
    if (this.mismatched_domains == null) {
      sb.append("null");
    } else {
      sb.append(this.mismatched_domains);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port_changed:");
    sb.append(this.port_changed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hosts_changed:");
    sb.append(this.hosts_changed);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_mismatched_domains()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mismatched_domains' is unset! Struct:" + toString());
    }

    if (!is_set_port_changed()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'port_changed' is unset! Struct:" + toString());
    }

    if (!is_set_hosts_changed()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hosts_changed' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InvalidConfigurationExceptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InvalidConfigurationExceptionStandardScheme getScheme() {
      return new InvalidConfigurationExceptionStandardScheme();
    }
  }

  private static class InvalidConfigurationExceptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<InvalidConfigurationException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InvalidConfigurationException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MISMATCHED_DOMAINS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.mismatched_domains = new java.util.ArrayList<java.lang.String>(_list36.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = iprot.readString();
                  struct.mismatched_domains.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.set_mismatched_domains_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PORT_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.port_changed = iprot.readBool();
              struct.set_port_changed_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOSTS_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hosts_changed = iprot.readBool();
              struct.set_hosts_changed_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InvalidConfigurationException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mismatched_domains != null) {
        oprot.writeFieldBegin(MISMATCHED_DOMAINS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mismatched_domains.size()));
          for (java.lang.String _iter39 : struct.mismatched_domains)
          {
            oprot.writeString(_iter39);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_CHANGED_FIELD_DESC);
      oprot.writeBool(struct.port_changed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOSTS_CHANGED_FIELD_DESC);
      oprot.writeBool(struct.hosts_changed);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InvalidConfigurationExceptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InvalidConfigurationExceptionTupleScheme getScheme() {
      return new InvalidConfigurationExceptionTupleScheme();
    }
  }

  private static class InvalidConfigurationExceptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<InvalidConfigurationException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InvalidConfigurationException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.mismatched_domains.size());
        for (java.lang.String _iter40 : struct.mismatched_domains)
        {
          oprot.writeString(_iter40);
        }
      }
      oprot.writeBool(struct.port_changed);
      oprot.writeBool(struct.hosts_changed);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InvalidConfigurationException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.mismatched_domains = new java.util.ArrayList<java.lang.String>(_list41.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem42;
        for (int _i43 = 0; _i43 < _list41.size; ++_i43)
        {
          _elem42 = iprot.readString();
          struct.mismatched_domains.add(_elem42);
        }
      }
      struct.set_mismatched_domains_isSet(true);
      struct.port_changed = iprot.readBool();
      struct.set_port_changed_isSet(true);
      struct.hosts_changed = iprot.readBool();
      struct.set_hosts_changed_isSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

